{"version":3,"sources":["firebase.js","View/Login/Login.jsx","View/Registration/Registration.jsx","App.js","serviceWorker.js","Store/Reducer/Login/initialState.js","Store/Reducer/index.js","Store/Reducer/Login/index.js","Store/ActionsType/actiontypes.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Login","history","useHistory","useState","email","setEmail","password","setPassword","className","id","action","type","placeholder","value","onChange","e","target","href","onClick","signInWithEmailAndPassword","then","user","console","log","catch","error","push","Register","App","exact","path","component","Boolean","window","location","hostname","match","initialAuthenticationState","loggedIn","register","combineReducers","authenticationReducer","state","payload","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7cce9dc9.chunk.js","sourcesContent":["import firebase from \"firebase\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nconst firebaseConfig = firebase.initializeApp({\n    apiKey: \"AIzaSyB7n5Mi_wsd8qloOlx53ydMEzJ2sgmKiB8\",\n    authDomain: \"halalmkt.firebaseapp.com\",\n    databaseURL: \"https://halalmkt.firebaseio.com\",\n    projectId: \"halalmkt\",\n    storageBucket: \"halalmkt.appspot.com\",\n    messagingSenderId: \"516294043833\",\n    appId: \"1:516294043833:web:f896bfec75e51ffc8f9368\",\n    measurementId: \"G-ZPJQ54N898\"\n});\n\nconst db = firebaseConfig.firestore();\n\nexport { db };","import React, {useEffect, useState} from \"react\";\nimport \"./Login.css\"\nimport {useHistory} from \"react-router\";\nimport {db} from \"../../firebase\";\n\nconst Login = () => {\n    const history = useHistory();\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const signIn = () => {\n        db.signInWithEmailAndPassword(email, password)\n            .then(user => {\n                console.log(\"USERLOGINDATA\",user)\n            })\n            .catch(error => {\n                //Do something with the error if you want!\n                console.log(\"USERLOGINERROR\",error)\n            });\n    };\n\n\n    const signUp = () => {\n        history.push(\"/register\")\n    }\n\n    return(\n        <div className=\"bodys-style\">\n\n            <div className=\"container\" id=\"container\">\n                <div className=\"form-container sign-up-container\">\n                </div>\n                <div className=\"form-container sign-in-container\">\n                    <form action=\"#\" className=\"form-style\">\n                        <h1>Sign in</h1>\n                        <span>or use your account</span>\n                        <input type=\"email\" placeholder=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)}/>\n                        <br/>\n                        <input type=\"password\" placeholder=\"Password\" value={password} onChange={(e) => setPassword(e.target.value)}/>\n\n                        <a href=\"#\" className=\"a-style\">Forgot your password?</a>\n                        <button type=\"button\" onClick={signIn}>Sign In</button>\n                    </form>\n                </div>\n                <div className=\"overlay-container\">\n                    <div className=\"overlay\">\n                        <div className=\"overlay-panel overlay-left\">\n                            <h1>Welcome Back!</h1>\n                            <p>To keep connected with us please login with your personal info</p>\n                            <button className=\"ghost\" id=\"signIn\">Sign In</button>\n                        </div>\n                        <div className=\"overlay-panel overlay-right\">\n                            <h1>Hey, Buddy!</h1>\n                            <p>Join with us and start a journey of a new beginning </p>\n                            <button className=\"ghost\" id=\"signUp\" onClick={signUp}>Sign Up</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Login","import React from \"react\";\nimport \"./Registration.css\"\nimport {useHistory} from \"react-router\";\n\nconst Register = () => {\n\n    const history = useHistory();\n    const signIn = () => {\n        history.push(\"/login\")\n    }\n    return(\n        <div className=\"body-style\">\n\n            <div className=\"container\" id=\"container\">\n                <div className=\"form-container sign-up-container\">\n                </div>\n                <div className=\"form-container sign-in-container\">\n                    <form action=\"#\" className=\"form-style\">\n                        <h1>Signing UP!</h1>\n\n                        <span>Join with us!</span>\n                        <input type=\"text\" placeholder=\"Name\"/>\n                        <br/>\n                        <input type=\"email\" placeholder=\"Email\"/>\n                        <br/>\n                        <input type=\"password\" placeholder=\"Password\"/>\n                        <br/>\n                        <button>Sign Up</button>\n                    </form>\n                </div>\n                <div className=\"overlay-container\">\n                    <div className=\"overlay\">\n                        <div className=\"overlay-panel overlay-left\">\n                            <h1>Welcome Back!</h1>\n                            <p>To keep connected with us please login with your personal info</p>\n                            <button className=\"ghost\" id=\"signIn\">Sign In</button>\n                        </div>\n                        <div className=\"overlay-panel overlay-right\">\n                            <h1>Hello, Friend!</h1>\n                            <p>Enter your personal details and start journey with us</p>\n                            <button className=\"ghost\" id=\"signUp\" onClick={signIn}>Sign In</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>)\n}\n\nexport default Register","import React from 'react';\nimport './App.css';\nimport {BrowserRouter, Switch, Route} from \"react-router-dom\";\nimport Login from \"./View/Login/Login\";\nimport Register from \"./View/Registration/Registration\";\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n            <Route   exact path=\"/login\" component={Login}/>\n            <Route   exact path=\"/register\" component={Register}/>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const initialAuthenticationState = {\n    loggedIn:[],\n    register:[],\n    error:\"\"\n}","import { combineReducers } from 'redux';\nimport {authenticationReducer} from \"./Login\";\n\nexport default combineReducers({\n    authenticationReducer\n});","import {LOGIN_ERROR,REGISTER_ERROR,REGISTER,LOGIN} from \"../../ActionsType/actiontypes\";\nimport {initialAuthenticationState} from \"./initialState\";\n\nexport const authenticationReducer = (state = initialAuthenticationState, action) => {\n    switch (action.type) {\n        case LOGIN: {\n            return {\n                ...state,\n                loggedIn: action.payload,\n            }\n        }\n\n        default: {\n            return {...state};\n        }\n    }\n}","export const LOGIN = \"LOGIN\"\nexport const LOGIN_ERROR = \"LOGIN_ERROR\"\nexport const REGISTER = \"REGISTER\"\nexport const REGISTER_ERROR = \"REGISTER_ERROR\"","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore,applyMiddleware } from 'redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\"\nimport { Provider } from 'react-redux';\nimport rootReducer from './Store/Reducer'\nconst store = createStore(rootReducer,composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}